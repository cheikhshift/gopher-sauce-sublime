# [PackageDev] target_format: plist, ext: tmLanguage
name: GopherMarkup
scopeName: source.gxml
fileTypes: [gxml]
uuid: c148a1ad-57b9-4a9f-87e5-76cdac2610ee

patterns:
- name: meta.tag.preprocessor.xml
  begin: (<\?)\s*([-_\p{Alnum}]+)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.xml}
    '2': {name: entity.name.tag.xml}
  end: (\?>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.xml}
  patterns:
  - name: entity.other.attribute-name.xml
    match: ' ([a-zA-Z-]+)'
  - include: '#doublequotedString'
  - include: '#singlequotedString'

- name: meta.tag.sgml.doctype.xml
  begin: (<!)(DOCTYPE)\s+([:\p{Alpha}_][:\p{Alnum}_.-]*)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.xml}
    '2': {name: keyword.doctype.xml}
    '3': {name: variable.documentroot.xml}
  end: \s*(>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.xml}
  patterns:
  - include: '#internalSubset'

- name: comment.block.xml
  begin: <[!%]--
  end: --%?>
  captures:
    '0': {name: punctuation.definition.comment.xml}

- name: meta.tag.no-content.xml
  begin: (<)((?:([-_\p{Alnum}]+)((:)))?([-_\p{Alnum}:]+))(?=(\s[^>]*)?></\2>)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.xml}
    '3': {name: entity.name.tag.namespace.xml}
    '4': {name: entity.name.tag.xml}
    '5': {name: punctuation.separator.namespace.xml}
    '6': {name: entity.name.tag.localname.xml}
  end: (>)(<)(/)(?:([-_\p{Alnum}]+)((:)))?([-_\p{Alnum}:]+)(>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.xml}
    '2': {name: punctuation.definition.tag.begin.xml meta.scope.between-tag-pair.xml}
    '3': {name: punctuation.definition.tag.begin.xml}
    '4': {name: entity.name.tag.namespace.xml}
    '5': {name: entity.name.tag.xml}
    '6': {name: punctuation.separator.namespace.xml}
    '7': {name: entity.name.tag.localname.xml}
    '8': {name: punctuation.definition.tag.end.xml}
  patterns:
  - include: '#tagStuff'

- name: meta.tag.xml
  begin: (</?)(?:([-_\p{Alnum}]+)((:)))?([-_\p{Alnum}:]+)
  end: (/?>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.xml}
  captures:
    '1': {name: punctuation.definition.tag.begin.xml}
    '2': {name: entity.name.tag.namespace.xml}
    '3': {name: entity.name.tag.xml}
    '4': {name: punctuation.separator.namespace.xml}
    '5': {name: entity.name.tag.localname.xml}
  patterns:

  - name: comment.block.go
  begin: /\*
  end: \*/

- name: comment.line.double-slash.go
  begin: //
  end: \z

- name: string.quoted.double.go
  begin: '"'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.go}
  end: '"'
  endCaptures:
    '0': {name: punctuation.definition.string.end.go}
  patterns:
  - include: '#string_placeholder'
  - include: '#string_escaped_char'

- name: string.quoted.raw.go
  begin: '`'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.go}
  end: '`'
  endCaptures:
    '0': {name: punctuation.definition.string.end.go}
  patterns:
  - include: '#string_placeholder'
  - include: source.gotemplate


- name: source.java-props.embedded.xml
  begin: <%@
  beginCaptures:
    '0': {name: punctuation.section.embedded.begin.xml}
  end: '%>'
  endCaptures:
    '0': {name: punctuation.section.embedded.end.xml}
  patterns:
  - name: keyword.other.page-props.xml
    match: page|include|taglib

- name: source.java.embedded.xml
  begin: <%[!=]?(?!--)
  beginCaptures:
    '0': {name: punctuation.section.embedded.begin.xml}
  end: (?!--)%>
  endCaptures:
    '0': {name: punctuation.section.embedded.end.xml}
  patterns:
  - include: source.java

- name: string.unquoted.cdata.xml
  begin: <!\[CDATA\[
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.xml}
  end: ']]>'
  endCaptures:
    '0': {name: punctuation.definition.string.end.xml}

- name: constant.language.go
  match: \b(true|false|nil|iota)\b

- name: constant.numeric.floating-point.go
  match: \b((\d+\.(\d+)?([eE][+-]?\d+)?|\d+[eE][+-]?\d+|\.\d+([eE][+-]?\d+)?)i?)\b

- name: constant.numeric.integer.go
  match: \b(\d+i|0[xX][0-9A-Fa-f]+|0[0-7]*|[1-9][0-9]*)\b

- name: constant.other.rune.go
  match: '''(?:[^''\\]|\\(?:\\|[abfnrtv'']|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3}))'''

- name: storage.type.go
  match: \b(bool|byte|complex(64|128)|error|float(32|64)|rune|string|u?int(8|16|32|64)?|uintptr)\b

- comment: A subset of keyword.other.go for flow control keywords.
  name: keyword.control.go
  match: \b(break|case|continue|default|defer|else|for|go|goto|if|range|return|select|switch)\b

- name: keyword.other.go
  match: \b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go|goto|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b

- comment: This matches the 'x := 0' style of variable declaration.
  name: meta.initialization.short.go
  match: (?:[[:alpha:]_][[:alnum:]_]*)(?:,\s+[[:alpha:]_][[:alnum:]_]*)*\s*(:=)
  captures:
    '0': {name: variable.other.go}
    '1': {name: keyword.operator.initialize.go}

- name: entity.name.function.go
  match: (?<=(\Afunc|...\))\s)\b(\w+)\b(?=\()

- name: entity.name.function.go
  match: (?<=(\sfunc|....\))\s)\b(\w+)\b(?=\()

- name: entity.name.function.go
  match: (struct|object|main|init|header|key|var|gos|timer|timers|method|methods|end|endpoints|web|tmpl|output|template|port|deploy)/gi

- name: entity.name.type.go
  match: (?<=\Atype\s)\b(\w+)\b

- name: entity.name.type.go
  match: (?<=\stype\s)\b(\w+)\b

- name: support.function.builtin.go
  match: \b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\b

- name: support.function.go
  match: \b(\w+)\b(?=\()

- name: keyword.operator.channel.go
  match: (<-)

- name: keyword.operator.comparison.go
  match: (==|!=|<|<=|>|>=)

- name: keyword.operator.logical.go
  match: (&&|[|]{2}|!)

- name: keyword.operator.increment.go
  match: ([+]{2})

- name: keyword.decrement.go
  match: (--)

- name: keyword.operator.assignment.go
  match: (=|(?:[+]|-|[|]|^|[*]|/|%|<<|>>|&|&^)=)

- name: keyword.operator.arithmetic.go
  match: ([+]|-|[*]|/|%|&|[|]|^|&^|<<|>>)

- name: keyword.operator.semi-colon.go
  match: (;)

- name: punctuation.definition.comma.go
  match: (,)

- name: punctuation.definition.dot.go
  match: ([.])

- name: punctuation.definition.colon.go
  match: (:)

- name: punctuation.definition.bracket.go
  match: (\[|\]|{|}|\(|\))

- include: '#tagStuff'
- include: '#entity'

- include: '#bare-ampersand'

repository:
  string_escaped_char:
    patterns:
    - name: constant.character.escape.go
      match: \\(\\|[abfnrtv'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3})
    - name: invalid.illegal.unknown-escape.go
      match: \\.

  string_placeholder:
    patterns:
    - name: constant.other.placeholder.go
      match: |-
        (?x)%
        (\d+\$)?                                    # field (argument #)
        [#0\- +']*                                  # flags
        [,;:_]?                                     # separator character (AltiVec)
        ((-?\d+)|\*(-?\d+\$)?)?                     # minimum field width
        (\.((-?\d+)|\*(-?\d+\$)?)?)?                # precision
        [diouxXDOUeEfFgGaAcCsSqpnvtTbyYhHmMzZ%]     # conversion type
  EntityDecl:
    begin: (<!)(ENTITY)\s+(%\s+)?([:\p{Alpha}_][:\p{Alnum}_.-]*)(\s+(?:SYSTEM|PUBLIC)\s+)?
    end: (>)
    captures:
      '1': {name: punctuation.definition.tag.begin.xml}
      '2': {name: keyword.entity.xml}
      '3': {name: punctuation.definition.entity.xml}
      '4': {name: variable.entity.xml}
      '5': {name: keyword.entitytype.xml}
    patterns:
    - include: '#doublequotedString'
    - include: '#singlequotedString'

  bare-ampersand:
    name: invalid.illegal.bad-ampersand.xml
    match: '&'

  doublequotedString:
    name: string.quoted.double.xml
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.xml}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.xml}
    patterns:
    - include: '#entity'
    - include: '#bare-ampersand'

  entity:
    name: constant.character.entity.xml
    match: (&)([:\p{Alpha}_][:\p{Alnum}_.-]*|#[0-9]+|#x\h+)(;)
    captures:
      '1': {name: punctuation.definition.constant.xml}
      '3': {name: punctuation.definition.constant.xml}

  internalSubset:
    name: meta.internalsubset.xml
    begin: (\[)
    end: (\])
    captures:
      '1': {name: punctuation.definition.constant.xml}
    patterns:
    - include: '#EntityDecl'
    - include: '#parameterEntity'

  parameterEntity:
    name: constant.character.parameter-entity.xml
    match: (%)([:\p{Alpha}_][:\p{Alnum}_.-]*)(;)
    captures:
      '1': {name: punctuation.definition.constant.xml}
      '3': {name: punctuation.definition.constant.xml}

  singlequotedString:
    name: string.quoted.single.xml
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.xml}
    end: ''''
    endCaptures:
      '0': {name: punctuation.definition.string.end.xml}
    patterns:
    - include: '#entity'
    - include: '#bare-ampersand'

  tagStuff:
    patterns:
    - match: ' (?:([-_\p{Alnum}]+)((:)))?([-_\p{Alnum}]+)='
      captures:
        '1': {name: entity.other.attribute-name.namespace.xml}
        '2': {name: entity.other.attribute-name.xml}
        '3': {name: punctuation.separator.namespace.xml}
        '4': {name: entity.other.attribute-name.localname.xml}
    - include: '#doublequotedString'
    - include: '#singlequotedString'
firstLineMatch: '^<\?xml '
foldingStartMarker: ^\s*(<[^!?%/](?!.+?(/>|</.+?>))|<[!%]--(?!.+?--%?>)|<%[!]?(?!.+?%>))
foldingStopMarker: ^\s*(</[^>]+>|[/%]>|-->)\s*$
keyEquivalent: ^~X

